/** Declaration file generated by dts-gen */

export class GDB {
    constructor(childProcess: any);

    addBreak(file: any, pos: any, thread: any): any;

    attach(pid: any): any;

    attachOnFork(): any;

    callstack(thread: any): any;

    context(thread: any): any;

    currentThread(): any;

    currentThreadGroup(): any;

    detach(process: any): any;

    enableAsync(): any;

    evaluate(expr: any, scope: any): any;

    execCLI(cmd: any, scope: any): any;

    execCMD(cmd: any, scope: any): any;

    execMI(cmd: any, scope: any): any;

    execPy(src: any, scope: any): any;

    exit(): any;

    init(): any;

    interrupt(scope: any): any;

    next(scope: any): any;

    proceed(scope: any): any;

    removeBreak(bp: any): any;

    reverseNext(scope: any): any;

    reverseProceed(scope: any): any;

    reverseStepIn(scope: any): any;

    run(group: any): any;

    selectThread(thread: any): any;

    selectThreadGroup(group: any): any;

    set(param: any, value: any): any;

    sourceFiles(...args: any[]): any;

    stepIn(scope: any): any;

    stepOut(scope: any): any;

    threadGroups(): any;

    threads(scope: any): any;

    static defaultMaxListeners: number;

    static listenerCount(emitter: any, type: any): any;

}

export function Breakpoint(id: any, ...args: any[]): void;

export function Frame(...args: any[]): void;

export function Thread(id: any, ...args: any[]): void;

export function ThreadGroup(id: any, ...args: any[]): void;

export function Variable(...args: any[]): void;

export namespace GDB {
    class EventEmitter {
        constructor();

        addListener(type: any, listener: any): any;

        emit(type: any, ...args: any[]): any;

        listenerCount(type: any): any;

        listeners(type: any): any;

        on(type: any, listener: any): any;

        once(type: any, listener: any, ...args: any[]): any;

        removeAllListeners(type: any, ...args: any[]): any;

        removeListener(type: any, listener: any): any;

        setMaxListeners(n: any): any;

        static EventEmitter: any;

        static defaultMaxListeners: number;

        static listenerCount(emitter: any, type: any): any;

    }

}

